from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from db.db import get_db
from db.filters_service import save_filter, get_filters, delete_filter
from bot.messages import GREETING_MESSAGE
from loguru import logger

router = Router()

# FSM: —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞
class FilterForm(StatesGroup):
    collection = State()
    model = State()
    backdrop = State()
    price_limit = State()


@router.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(GREETING_MESSAGE)


@router.message(Command("filters"))
async def cmd_filters(message: types.Message):
    async for session in get_db():
        filters = await get_filters(session, user_id=message.from_user.id)
        if not filters:
            await message.answer("‚ùå –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤.")
            return
        text = "\n\n".join([
            f"üÜî {f.id} | üéÅ <b>{f.collection}</b>\nüé≠ {f.model}, üåÑ {f.backdrop}, üí∞ –¥–æ {f.price_limit} TON"
            for f in filters
        ])
        await message.answer(f"üì¶ <b>–¢–≤–æ–∏ —Ñ–∏–ª—å—Ç—Ä—ã:</b>\n\n{text}", parse_mode="HTML")


@router.message(Command("add_filter"))
async def cmd_add_filter(message: types.Message, state: FSMContext):
    await message.answer("üß© –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ (collection):")
    await state.set_state(FilterForm.collection)


@router.message(FilterForm.collection)
async def fsm_collection(message: types.Message, state: FSMContext):
    await state.update_data(collection=message.text.strip())
    await message.answer("üé≠ –í–≤–µ–¥–∏ –º–æ–¥–µ–ª—å (model):")
    await state.set_state(FilterForm.model)


@router.message(FilterForm.model)
async def fsm_model(message: types.Message, state: FSMContext):
    await state.update_data(model=message.text.strip())
    await message.answer("üåÖ –í–≤–µ–¥–∏ —Ñ–æ–Ω (backdrop):")
    await state.set_state(FilterForm.backdrop)


@router.message(FilterForm.backdrop)
async def fsm_backdrop(message: types.Message, state: FSMContext):
    await state.update_data(backdrop=message.text.strip())
    await message.answer("üí∏ –í–≤–µ–¥–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É (TON):")
    await state.set_state(FilterForm.price_limit)


@router.message(FilterForm.price_limit)
async def fsm_price(message: types.Message, state: FSMContext):
    try:
        price = float(message.text.strip())
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏ —á–∏—Å–ª–æ.")
        return

    await state.update_data(price_limit=price)
    data = await state.get_data()

    async for session in get_db():
        new_filter = await save_filter(session, {
            "collection": data["collection"],
            "model": data["model"],
            "backdrop": data["backdrop"],
            "symbol": None,
            "price_limit": data["price_limit"]
        }, user_id=message.from_user.id)

    await message.answer(f"‚úÖ –§–∏–ª—å—Ç—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω —Å ID: {new_filter.id}")
    await state.clear()


@router.message(Command("delete_filter"))
async def cmd_delete_filter(message: types.Message, state: FSMContext):
    await message.answer("üóë –í–≤–µ–¥–∏ ID —Ñ–∏–ª—å—Ç—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å:")
    await state.set_state("awaiting_filter_id")


@router.message(F.text.regexp(r"^\d+$"))
async def handle_filter_id_input(message: types.Message, state: FSMContext):
    state_name = await state.get_state()
    if state_name != "awaiting_filter_id":
        return  # –ù–µ –≤ —Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ ‚Äî –∏–≥–Ω–æ—Ä–∏–º

    filter_id = int(message.text.strip())
    async for session in get_db():
        success = await delete_filter(session, filter_id, user_id=message.from_user.id)

    if success:
        await message.answer(f"‚úÖ –§–∏–ª—å—Ç—Ä {filter_id} —É–¥–∞–ª—ë–Ω.")
    else:
        await message.answer(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∏–ª—å—Ç—Ä —Å ID: {filter_id}")
    await state.clear()


def register_handlers(dp):
    dp.include_router(router)