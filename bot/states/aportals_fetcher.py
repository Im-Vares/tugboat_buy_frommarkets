import asyncio
import json
from pathlib import Path
from loguru import logger
from aportalsmp import collections, filterFloors
from aportalsmp.auth import update_auth
from config import API_ID, API_HASH, SESSION_NAME

# –ü—É—Ç—å –∫ JSON-—Ö—Ä–∞–Ω–∏–ª–∏—â—É
CACHE_PATH = Path("data/gift_cache.json")
CACHE_PATH.parent.mkdir(parents=True, exist_ok=True)

# === –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å retry ===
async def get_auth_data(retries: int = 3, delay: int = 5):
    for attempt in range(retries):
        try:
            logger.info(f"üîí –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è {attempt + 1}/{retries}")
            return await update_auth(api_id=API_ID, api_hash=API_HASH, session_name=SESSION_NAME)
        except Exception as e:
            logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
            if attempt < retries - 1:
                await asyncio.sleep(delay * (attempt + 1))
    logger.critical("üõë –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫")
    return None

# === –ó–∞–≥—Ä—É–∑–∫–∞ –∫—ç—à–∞ ===
def load_cache() -> dict:
    if CACHE_PATH.exists():
        with open(CACHE_PATH, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

# === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫—ç—à–∞ ===
def save_cache(data: dict):
    with open(CACHE_PATH, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# === –ü–æ–ª—É—á–µ–Ω–∏–µ –í–°–ï–• –∫–æ–ª–ª–µ–∫—Ü–∏–π ===
async def fetch_collections() -> list[str]:
    cache = load_cache()
    if "collections" in cache:
        logger.info("üì¶ –ö–æ–ª–ª–µ–∫—Ü–∏–∏ –≤–∑—è—Ç—ã –∏–∑ –∫—ç—à–∞")
        return list(cache["collections"].keys())

    auth_data = await get_auth_data()
    if not auth_data:
        return []

    try:
        data = await collections(authData=auth_data)
        collections_dict = {
            c.get("short_name"): {} for c in getattr(data, "_collections", []) if c.get("short_name")
        }
        logger.success(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–æ–ª–ª–µ–∫—Ü–∏–π: {len(collections_dict)}")

        cache["collections"] = collections_dict
        save_cache(cache)
        return list(collections_dict.keys())
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–π: {e}")
        return []

# === –ü–æ–ª—É—á–µ–Ω–∏–µ –í–°–ï–• –º–æ–¥–µ–ª–µ–π –ø–æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ ===
async def fetch_models(collection: str) -> list[str]:
    cache = load_cache()
    if collection in cache.get("collections", {}) and "models" in cache["collections"][collection]:
        logger.info(f"üß© –ú–æ–¥–µ–ª–∏ –¥–ª—è {collection} –≤–∑—è—Ç—ã –∏–∑ –∫—ç—à–∞")
        return cache["collections"][collection]["models"]

    auth_data = await get_auth_data()
    if not auth_data:
        return []

    try:
        filters = await filterFloors(gift_name=collection, authData=auth_data)
        models = filters.models if filters and filters.models else []
        logger.debug(f"üß© –ú–æ–¥–µ–ª–∏ –¥–ª—è {collection}: {models}")

        cache.setdefault("collections", {}).setdefault(collection, {})["models"] = models
        save_cache(cache)
        return models
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π –¥–ª—è {collection}: {e}")
        return []

# === –ü–æ–ª—É—á–µ–Ω–∏–µ –í–°–ï–• —Ñ–æ–Ω–æ–≤ (–≥–ª–æ–±–∞–ª—å–Ω–æ, –Ω–µ –ø–æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏) ===
async def fetch_backdrops(_: str = None) -> list[str]:
    cache = load_cache()
    if "backdrops" in cache:
        logger.info("üåÑ –§–æ–Ω—ã –≤–∑—è—Ç—ã –∏–∑ –∫—ç—à–∞")
        return cache["backdrops"]

    auth_data = await get_auth_data()
    if not auth_data:
        return []

    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª—é–±—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ–Ω–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä –ø–µ—Ä–≤—É—é)
        collections_list = await fetch_collections()
        if not collections_list:
            return []
        filters = await filterFloors(gift_name=collections_list[0], authData=auth_data)
        backdrops = filters.backdrops if filters and filters.backdrops else []
        logger.debug(f"üåÑ –§–æ–Ω—ã: {backdrops}")

        cache["backdrops"] = backdrops
        save_cache(cache)
        return backdrops
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ–Ω–æ–≤: {e}")
        return []