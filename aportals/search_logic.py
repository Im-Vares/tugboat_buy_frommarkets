from pathlib import Path
import json
import re
from aportalsmp.gifts import search
from aportalsmp.auth import update_auth
from db.pending_gift_service import save_pending_gift, is_gift_already_pending
from db.db import get_db
from loguru import logger
from config import API_ID, API_HASH, SESSION_NAME, BOT_TOKEN
from shared.utils import get_filter_filename  # ‚úÖ –æ–±—â–∏–π –º–µ—Ç–æ–¥ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
from aiogram import Bot

authData = None
bot = Bot(token=BOT_TOKEN)


async def init_aportals():
    global authData
    logger.info("üîå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ APortals...")
    try:
        authData = await update_auth(
            api_id=API_ID,
            api_hash=API_HASH,
            session_name=SESSION_NAME
        )
        logger.success("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        authData = None


async def search_gifts_by_filter(collection: str, model: str, backdrop: str, price_limit: float, filter_id: int, user_id: int):
    if not authData:
        raise ValueError("‚ùå authData –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –≤—ã–∑–æ–≤–∏ init_aportals()")

    logger.info(f"üîé –ò—â–µ–º –ø–æ–¥–∞—Ä–∫–∏: collection='{collection}' model='{model}' backdrop='{backdrop}' price_limit={price_limit}")

    try:
        gifts = await search(
            sort="price_asc",
            gift_name=collection or "",
            model=model or "",
            backdrop=backdrop or "",
            max_price=price_limit,
            authData=authData
        )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —á–µ—Ä–µ–∑ API: {e}")
        return []

    result = []

    async for session in get_db():
        for g in gifts:
            price = g.price
            if price is None:
                continue

            gift_id = g.id or getattr(g, "nft_id", None)
            if not gift_id:
                continue

            g_dict = g.__dict__.copy()

            if price <= price_limit:
                already_saved = await is_gift_already_pending(session, filter_id, gift_id)
                if not already_saved:
                    logger.success(f"üéÅ –ù–æ–≤—ã–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–æ–¥–∞—Ä–æ–∫: {g.name} –∑–∞ {price} TON")
                    await save_pending_gift(session, filter_id, g_dict)

                    # üì§ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
                    photo = g_dict.get("photo_url")
                    price_val = g_dict.get("price")
                    name = g_dict.get("name", "–ü–æ–¥–∞—Ä–æ–∫")
                    if photo and price_val:
                        try:
                            await bot.send_photo(
                                chat_id=user_id,
                                photo=photo,
                                caption=(
                                    f"üéÅ <b>{name}</b>\n"
                                    f"üí∞ –¶–µ–Ω–∞: <b>{price_val} TON</b>\n\n"
                                    f"‚úÖ –ü–æ–¥—Ö–æ–¥–∏—Ç –ø–æ —Ñ–∏–ª—å—Ç—Ä—É. –û–∂–∏–¥–∞–µ–º –ø–æ–∫—É–ø–∫—É..."
                                ),
                                parse_mode="HTML"
                            )
                        except Exception as e:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
                else:
                    logger.debug(f"üîÅ –ü–æ–¥–∞—Ä–æ–∫ —É–∂–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω: {gift_id}")

                g_dict["status"] = "‚úÖ –ü–æ–¥—Ö–æ–¥–∏—Ç –ø–æ —Ñ–∏–ª—å—Ç—Ä—É"
            else:
                g_dict["status"] = f"‚ùå –î–æ—Ä–æ–≥–æ–π: {price} TON > {price_limit} TON"

            result.append(g_dict)

    # üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
    try:
        Path("data").mkdir(parents=True, exist_ok=True)
        filename = get_filter_filename(collection, model, backdrop, price_limit)
        output_path = Path("data") / filename

        with open(output_path, "w", encoding="utf-8") as f:
            json.dump(result, f, ensure_ascii=False, indent=2)

        logger.info(f"üì¶ –°–æ—Ö—Ä–∞–Ω–∏–ª–∏ –ø–æ–¥–∞—Ä–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞ –≤ {output_path}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ JSON-—Ñ–∞–π–ª–∞: {e}")

    return result